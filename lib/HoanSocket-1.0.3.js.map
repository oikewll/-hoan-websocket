{"version":3,"file":"HoanSocket-1.0.3.js","sources":["../index.js"],"sourcesContent":["/**\n * @param {String} wsurl WebSocket连接地址\n * @param {Number} heartbeatIdleTime 心跳空闲时间\n * @param {Number} heartbeatInterval 心跳间隔时间\n * @param {String} heartbeatCMessage 心跳客户端字符串\n * @param {String} heartbeatSMessage 心跳服务端字符串\n * @param {String} reconnectTime 重连时间\n * @param {Boolean} isDestroy 是否销毁\n * @param {Boolean} isDebug debug模式会打印操作\n * @returns {send} 实例调用send，数据是对象\n * @returns {onmessage} 实例调用onmessage，第二个参数是只回调data[data] \n * @returns {onopen} 实例调用onopen\n * @returns {onerror} 实例调用onerror\n */\n\nexport default class KaliSocket {\n    constructor(wsurl){\n        this.connectURL = wsurl || \"\";\n        this.lastHealth = -1;               // 最后一次心跳时间\n        this.heartbeatIdleTime = 25000;     // 30秒空闲时间\n        this.heartbeatInterval = 10000;     // 心跳间隔，10秒一次心跳\n        this.heartbeatCMessage = '~H#C~';   // 客户端心跳发送内容\n        this.heartbeatSMessage = '~H#S~';   // 服务器心跳发送内容\n        this.timeoutObj = null;             // 心跳定时器\n        this.reconnectTime = 2000;          // 重连时间，2秒\n        this.reconnectObj = null;           // 重连定时器\n        this.isDestroy = false;             // 是否销毁\n        this.isDebug = false;               // 是否打开调试功能\n        this.init();\n    }\n    init(){\n        this.webSocketObj = new WebSocket(this.connectURL);\n        window.addEventListener('offline', function(e) { \n            console.log('offline');\n        });\n        window.addEventListener('online', function(e) {\n            console.log('online'); \n        });\n    }\n    // 自定义WSC连接事件：服务端与前端连接成功后触发\n    onopen(event){\n        this.isDebug && console.log(event)\n    }\n    // 自定义WSC消息接收事件：服务端向前端发送消息时触发\n    onmessage(event){\n        this.isDebug && console.log(event)\n    }\n    // 自定义WSC异常事件：WSC报错后触发\n    onerror(event){\n        this.isDebug && console.log(event)\n    }\n    // 自定义WSC关闭事件：WSC关闭后触发\n    onclose(event){\n        this.isDebug && console.log(event)\n    }\n    send(msg){\n        const MSG = typeof msg === 'string' ? msg : JSON.stringify(msg);\n        this.webSocketObj.send(MSG)\n        this.isDebug && console.warn(`ws发送消息==>：${MSG}`);\n    }\n    create(options){\n        // 把options配置合并覆盖到原有的构造器\n        if (options) {\n            Object.assign(this, options);\n        }\n        const websocket = this.webSocketObj;\n        websocket.onopen = (evnt)=>{\n            this.onopen(evnt);\n            this.heartStart();\n        };\n        websocket.onmessage = (evnt)=>{\n            // 收到服务端消息，更新最后健康时间\n            this.lastHealth = Date.now();\n            this.heartReset();\n\n            // 过滤服务器心跳\n            if(evnt.data != this.heartbeatSMessage) {\n                this.onmessage(evnt);\n            }\n        };\n        websocket.onerror = (evnt)=>{\n            this.onerror(evnt);\n        };\n        websocket.onclose = (evnt)=>{\n            this.onclose(evnt);\n            this.deteck();\n        };\n    }\n    deteck(){\n        if (!this.isDestroy) {\n            this.isDestroy = true;\n            this.webSocketObj.close();\n            this.reconnectObj = setTimeout(()=>{\n                this.reconnect();\n            }, this.reconnectTime)\n        }\n    }\n    destroy(){\n        clearTimeout(this.timeoutObj);\n        clearTimeout(this.reconnectObj);\n        this.isDestroy = true;\n        this.webSocketObj.close();\n    }\n    heartStart(){\n        if (this.webSocketObj.readyState != 1) {\n            return false;\n        }\n        this.timeoutObj = setInterval(()=>{ \n            // lastHealth不为-1，而且这一次的时间戳减上一次服务端返回的时间戳大于默认的心跳空余时间，就主动关闭ws进入重连\n            if (this.lastHealth !== -1 && (Date.now() - this.lastHealth > this.heartbeatIdleTime)) {\n                this.isDebug && console.log(\"服务器没有响应.\");\n                // 此时应该触发关闭，然后进入重连\n                this.webSocketObj.close();\n                return;\n            }\n\n            if (this.webSocketObj.readyState != 1) {\n                // 这里可以做ajax请求触发链接断开日志，方便服务器排查问题\n                this.isDebug && console.log(\"连接断开! \" + new Date().toUTCString());\n                return;\n            }\n            // 判断数据是否发送完毕\n            if (this.webSocketObj.bufferedAmount === 0) {\n                this.webSocketObj.send(this.heartbeatCMessage);\n            } else  {\n                console.log(\"数据未发送完毕! \" + new Date().toUTCString());\n            }\n            this.isDebug && console.log(\"连接正常! \" + new Date().toUTCString());\n\n        }, this.heartbeatInterval);\n    }\n    heartReset() {\n        clearTimeout(this.timeoutObj);\n        this.heartStart();\n    }\n    reconnect() {\n        this.isDebug && console.log(\"断线重连中...\");\n        this.timeoutObj && clearTimeout(this.timeoutObj);\n        const wsurl = this.connectURL;\n        this.webSocketObj = new WebSocket(wsurl);\n        this.isDestroy = false;\n        this.create();\n    }\n}"],"names":["wsurl","connectURL","lastHealth","heartbeatIdleTime","heartbeatInterval","heartbeatCMessage","heartbeatSMessage","timeoutObj","reconnectTime","reconnectObj","isDestroy","isDebug","init","webSocketObj","WebSocket","this","window","addEventListener","e","console","log","event","msg","MSG","JSON","stringify","send","warn","options","Object","assign","websocket","onopen","evnt","_this","heartStart","onmessage","Date","now","heartReset","data","onerror","onclose","deteck","close","setTimeout","_this2","reconnect","clearTimeout","readyState","setInterval","_this3","bufferedAmount","toUTCString","create"],"mappings":"mYAgBgBA,8GACHC,WAAaD,GAAS,QACtBE,YAAc,OACdC,kBAAoB,UACpBC,kBAAoB,SACpBC,kBAAoB,aACpBC,kBAAoB,aACpBC,WAAa,UACbC,cAAgB,SAChBC,aAAe,UACfC,WAAY,OACZC,SAAU,OACVC,kEAGAC,aAAe,IAAIC,UAAUC,KAAKd,YACvCe,OAAOC,iBAAiB,UAAW,SAASC,GACxCC,QAAQC,IAAI,aAEhBJ,OAAOC,iBAAiB,SAAU,SAASC,GACvCC,QAAQC,IAAI,2CAIbC,QACEV,SAAWQ,QAAQC,IAAIC,qCAGtBA,QACDV,SAAWQ,QAAQC,IAAIC,mCAGxBA,QACCV,SAAWQ,QAAQC,IAAIC,mCAGxBA,QACCV,SAAWQ,QAAQC,IAAIC,gCAE3BC,GACKC,EAAqB,iBAARD,EAAmBA,EAAME,KAAKC,UAAUH,QACtDT,aAAaa,KAAKH,QAClBZ,SAAWQ,QAAQQ,yBAAkBJ,mCAEvCK,cAECA,GACAC,OAAOC,OAAOf,KAAMa,GAElBG,EAAYhB,KAAKF,aACvBkB,EAAUC,OAAS,SAACC,GAChBC,EAAKF,OAAOC,GACZC,EAAKC,cAETJ,EAAUK,UAAY,SAACH,GAEnBC,EAAKhC,WAAamC,KAAKC,MACvBJ,EAAKK,aAGFN,EAAKO,MAAQN,EAAK5B,mBACjB4B,EAAKE,UAAUH,IAGvBF,EAAUU,QAAU,SAACR,GACjBC,EAAKO,QAAQR,IAEjBF,EAAUW,QAAU,SAACT,GACjBC,EAAKQ,QAAQT,GACbC,EAAKS,sDAIJ5B,KAAKL,iBACDA,WAAY,OACZG,aAAa+B,aACbnC,aAAeoC,WAAW,WAC3BC,EAAKC,aACNhC,KAAKP,kDAIZwC,aAAajC,KAAKR,YAClByC,aAAajC,KAAKN,mBACbC,WAAY,OACZG,aAAa+B,2DAGkB,GAAhC7B,KAAKF,aAAaoC,kBACX,OAEN1C,WAAa2C,YAAY,kBAED,IAArBC,EAAKjD,YAAsBmC,KAAKC,MAAQa,EAAKjD,WAAaiD,EAAKhD,mBAC/DgD,EAAKxC,SAAWQ,QAAQC,IAAI,iBAE5B+B,EAAKtC,aAAa+B,cAIc,GAAhCO,EAAKtC,aAAaoC,YAMmB,IAArCE,EAAKtC,aAAauC,eAClBD,EAAKtC,aAAaa,KAAKyB,EAAK9C,mBAE5Bc,QAAQC,IAAI,aAAc,IAAIiB,MAAOgB,eAEzCF,EAAKxC,SAAWQ,QAAQC,IAAI,UAAW,IAAIiB,MAAOgB,gBAT9CF,EAAKxC,SAAWQ,QAAQC,IAAI,UAAW,IAAIiB,MAAOgB,iBAWvDtC,KAAKX,wDAGR4C,aAAajC,KAAKR,iBACb4B,sDAGAxB,SAAWQ,QAAQC,IAAI,iBACvBb,YAAcyC,aAAajC,KAAKR,gBAC/BP,EAAQe,KAAKd,gBACdY,aAAe,IAAIC,UAAUd,QAC7BU,WAAY,OACZ4C"}